// Generated by CoffeeScript 1.3.3
(function() {
  var $, Colors, doTheme, formatBytes, phpProxyUrl;

  $ = jQuery;

  phpProxyUrl = './proxy.php?url=';

  Colors = {
    rgbToHsl: function(r, g, b) {
      var d, h, l, max, min, s;
      r /= 255;
      g /= 255;
      b /= 255;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      l = (max + min) / 2;
      if (max === min) {
        h = s = 0;
      } else {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
          case r:
            h = (g - b) / d + (g < b ? 6 : 0);
            break;
          case g:
            h = (b - r) / d + 2;
            break;
          case b:
            h = (r - g) / d + 4;
        }
        h /= 6;
      }
      return [h, s, l];
    },
    hslToRgb: function(h, s, l) {
      var b, g, hue2rgb, p, q, r;
      if (s === 0) {
        r = g = b = l;
      } else {
        hue2rgb = function(p, q, t) {
          if (t < 0) {
            t += 1;
          }
          if (t > 1) {
            t -= 1;
          }
          if (t < 1 / 6) {
            return p + (q - p) * 6 * t;
          }
          if (t < 1 / 2) {
            return q;
          }
          if (t < 2 / 3) {
            return p + (q - p) * (2 / 3 - t) * 6;
          }
          return p;
        };
        q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
      }
      return [r * 255, g * 255, b * 255];
    },
    rgbify: function(colr) {
      colr = colr.replace(/#/, '');
      if (colr.length === 3) {
        return [parseInt(colr.slice(0, 1) + colr.slice(0, 1), 16), parseInt(colr.slice(1, 2) + colr.slice(1, 1), 16), parseInt(colr.slice(2, 3) + colr.slice(2, 1), 16)];
      } else if (colr.length === 6) {
        return [parseInt(colr.slice(0, 2), 16), parseInt(colr.slice(2, 4), 16), parseInt(colr.slice(4, 6), 16)];
      } else {
        return [0, 0, 0];
      }
    },
    hexify: function(rgb) {
      var blue, colr, green, red;
      red = Math.floor(rgb[0]).toString(16);
      if (red.length < 2) {
        red = '0' + red;
      }
      blue = Math.floor(rgb[1]).toString(16);
      if (blue.length < 2) {
        blue = '0' + blue;
      }
      green = Math.floor(rgb[2]).toString(16);
      if (green.length < 2) {
        green = '0' + green;
      }
      colr = '#';
      colr += red;
      colr += blue;
      colr += green;
      return colr;
    },
    lighten: function(rgb, percent) {
      var hsl, lightness, str;
      if (typeof rgb === 'string') {
        rgb = this.rgbify(rgb);
      }
      hsl = this.rgbToHsl.apply(this, rgb);
      lightness = hsl[2] + (hsl[2] * percent);
      lightness = Math.min(1.0, lightness);
      str = this.hexify(this.hslToRgb(hsl[0], hsl[1], lightness));
      return str;
    }
  };

  formatBytes = function(bytes) {
    var i, sizes;
    sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    if (bytes === 0) {
      return 'n/a';
    }
    i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
    return (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + sizes[i];
  };

  doTheme = function(obj, options) {
    var bot, top;
    bot = options.buttonColour;
    top = Colors.lighten(bot, 0.35);
    $('a', obj).css({
      background: bot
    });
    $('a', obj).css({
      background: "linear-gradient( top, " + top + " 0%, " + bot + " 100%)"
    });
    $('a', obj).css({
      background: "-o-linear-gradient( top, " + top + " 0%, " + bot + " 100%)"
    });
    $('a', obj).css({
      background: "-ms-linear-gradient( top, " + top + " 0%, " + bot + " 100%)"
    });
    $('a', obj).css({
      background: "-moz-linear-gradient( top, " + top + " 0%, " + bot + " 100%)"
    });
    $('a', obj).css({
      background: "-webkit-linear-gradient( top, " + top + " 0%, " + bot + " 100%)"
    });
    $('a', obj).css({
      color: options.buttonTextColour
    });
    $('p', obj).css({
      background: options.tabColour
    });
    return $('p', obj).css({
      color: options.tabTextColour
    });
  };

  $.fn.jButton = function(options) {
    var defaults;
    defaults = {
      buttonColour: '#009ec3',
      tabColour: '#222222',
      tabTextColour: '#ffffff',
      buttonTextColour: '#ffffff'
    };
    options = $.extend(defaults, options);
    return this.each(function() {
      var button, file;
      button = $(this);
      file = button.attr('file');
      button.removeAttr('file');
      button.addClass('jbutton');
      button.append($('<a>').attr('href', file).text('Download')).append($('<p>').attr('class', 'top')).append($('<p>').attr('class', 'bottom'));
      doTheme(button, options);
      return $.ajax({
        type: 'GET',
        url: phpProxyUrl + file,
        dataType: 'json',
        success: function(data) {
          if (data['httpCode'] === '200') {
            $('.top', button).text('Type: ' + data['Content-Type']);
            return $('.bottom', button).text('Size: ' + formatBytes(data['Content-Length']));
          } else {
            $('.top', button).text('Error: ' + data['httpCode']);
            return $('.bottom', button).text(data['httpResp']);
          }
        },
        error: function(x, t, m) {}
      });
    });
  };

}).call(this);
